{"number":"52","startingCode":"void setup()\n{\n  Serial.begin(9600); // Setup the serial port speed\n  Serial.println(\"Begin setup()\"); // Send to Serial port for debug\n  for(int  ledNumber = 2; ledNumber <= 15; ledNumber ++)\n  {\n    pinMode(ledNumber, OUTPUT);\n  }\n}\n\nvoid loop()\n{\n  Serial.println(\"Begin loop()\"); // Send to Serial port for debug\n  int ledNumber;\n  int delayTime = 200;\n  for (ledNumber = 2; ledNumber <= 15; ledNumber++)\n  {\n    Serial.print(\"Turn  on  ledNumber \"); // Send to Serial port for debug\n    Serial.println(ledNumber); // print a variable & finish printing the line\n    digitalWrite(ledNumber, HIGH);\n    delay(delayTime);\n    digitalWrite(ledNumber, LOW);\n  }\n  delay(5000);\n  Serial.println(\"Finished loop()\"); // Send to Serial port for debug\n}","suffix":"int main() {\n  setup();\n  loop();\n  return 0;\n}\n","board":{"type":"LED Board","setup":{"pinKeyframes":[]}},"frameManager":{"frames":[{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":1023},"postDelay":200,"outputText":["Begin setup()\n","Make pins 2-15 outputs\n","Pins 2-15 are outputs\n","Finished setup()\n","Begin loop()\n","Begin turning LED's 2-15 on / off\n","Entering for loop with ledNumber == 2\n","Turn on ledNumber ","2\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":1023},"postDelay":200,"outputText":["Turn off ledNumber ","2\n","Turn on ledNumber ","3\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":1023},"postDelay":200,"outputText":["Turn off ledNumber ","3\n","Turn on ledNumber ","4\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":1023},"postDelay":200,"outputText":["Turn off ledNumber ","4\n","Turn on ledNumber ","5\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":1023},"postDelay":200,"outputText":["Turn off ledNumber ","5\n","Turn on ledNumber ","6\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":1023},"postDelay":200,"outputText":["Turn off ledNumber ","6\n","Turn on ledNumber ","7\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1023},"postDelay":200,"outputText":["Turn off ledNumber ","7\n","Turn on ledNumber ","8\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1023},"postDelay":200,"outputText":["Turn off ledNumber ","8\n","Turn on ledNumber ","9\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1023},"postDelay":200,"outputText":["Turn off ledNumber ","9\n","Turn on ledNumber ","10\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1023},"postDelay":200,"outputText":["Turn off ledNumber ","10\n","Turn on ledNumber ","11\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1023},"postDelay":200,"outputText":["Turn off ledNumber ","11\n","Turn on ledNumber ","12\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1023},"postDelay":200,"outputText":["Turn off ledNumber ","12\n","Turn on ledNumber ","13\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1023},"postDelay":200,"outputText":["Turn off ledNumber ","13\n","Turn on ledNumber ","14\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1023},"postDelay":200,"outputText":["Turn off ledNumber ","14\n","Turn on ledNumber ","15\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"postDelay":5000,"outputText":["Turn off ledNumber ","15\n","Finishing for loop with ledNumber == 15\n","Done turning LED's 2-15 on / off\n","delay 5 seconds\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"postDelay":0,"outputText":["Finished loop()\n"]}],"currentFrame":15,"elapsedTime":7800,"isGraded":false},"directions":"**Exercise 52:** Learning how to use If/else statements to make decisions\ninside your code based on variables and other conditions.\n\n\n\n**NEW:** Using If/else in the Arduino programming environment to to make\ndecisions;\n\n\n\n**DESCRIPTION:**\n\n\n\nIn life, sometimes you need to make a decision. Do you turn left or right\nthere? Do you take the front seat or the back seat?\n\n\n\nLikewise, sometimes computer programs will have to make decisions. Examples:\n\nOn a car, suppose it detects it is dark outside. Should the headlights be on\nor off?\n\nOn any computer system with a login, suppose someone enters the correct\npassword. Do we let them log in?\n\n\n\nIf you want to make some rules to describe these things in English, you will\nprobably use the word ‘if’. Like so:\n\n\n\nIf it is dark outside, then turn the headlights on.\n\nIf the user inputs the correct password, then log them in.\n\n\n\nThis works. But you might also want to say what happens if the conditions are\nnot met. Like so:\n\n\n\nIf it is dark outside, turn the headlights on. Otherwise, turn them off.\n(Maybe the sun just came up, we don’t want the headlights to stay stuck on).\n\nIf the user inputs the correct password, log them in. For anything else, print\n“ACCESS DENIED” in all caps and make an obnoxious noise.\n\n\n\nYou can pretty much make the same kinds of statements in C.\n\n\n\n**EXAMPLE:**\n\n\n\nint x=7;\n\nif (x==4)\n\n{\n\ndigitalWrite(5,HIGH);\n\n}\n\n\n\nBefore you try to deduce what this does, you should probably know what that\n‘==‘ symbol inside the ‘if’ statement is. That tests for equality. For\ninstance, 3==3 is true, 4==3 is false. We use a double equal sign instead of\none equal sign to tell the difference between assignment and comparison. For\ninstance:\n\n\n\nx=3 says ‘x gets the value of 3’\n\nx==3 says ‘is x equal to 3?’\n\n\n\nTherefore, this if statement makes the LED at pin 5 turn on if x is equal to\n4. Since x is 7, this will do nothing.\n\n\n\nThere’s a ridiculously common bug out there where programmers confuse the two\nequal signs and write stuff like if(x=3) when they meant if(x==3). Don’t do\nthat. If you really want to know what happens when using the wrong equal sign,\nhere’s an example:\n\n\n\nint x=5;\n\nif(x=3)\n\n{\n\nSerial.print(“x is equal to 3!”);\n\n}\n\n\n\nThe concept of ‘true’ in an if statement is represented by any non-zero number\n(almost always 1). False is equal to 0. When you write something like ‘x==5’,\nthe whole statement evaluates to 1 if x is 5, and 0 otherwise. The statement\n‘x=3’ evaluates to 3 (yes it’s weird). 3 is non-zero, and therefore represents\ntrue.\n\nSo what actually happens? No matter what x is, it will print out “x is equal\nto 3!”. So saying this: if(x=3){… is pretty much saying “did x get assigned\nsomething that isn’t zero?”\n\n\n\nWe’ve seen ‘==‘ so far, but there are a bunch of other symbols that can be\nused for comparison:\n\n\n\nSymbol\n\n|\n\nWhat it means\n\n|\n\nThis is a true statement  \n  \n---|---|---  \n  \n==\n\n|\n\nEqual\n\n|\n\n3==3  \n  \n!=\n\n|\n\nNot equal\n\n|\n\n10!=0  \n  \n>\n\n|\n\nGreater than\n\n|\n\n0 > -4  \n  \n<\n\n|\n\nLess than\n\n|\n\n5 < 100  \n  \n>=\n\n|\n\nGreater than or equal\n\n|\n\n4 >= 4  \n  \n<=\n\n|\n\nLess than or equal\n\n|\n\n5 <= 6  \n  \n\n\n“Else”\n\nThe next major feature is the ‘else’ keyword. This is how you would say\n‘otherwise’ with an if statement. Example:\n\n\n\nif(x < 10)\n\n{\n\nSerial.print(“x is less than 10”);\n\n}\n\nelse\n\n{\n\nSerial.print(“x is not less than 10”);\n\n}\n\n\n\nAnother feature is “else if”. Maybe you don’t want one big “otherwise”\nstatement but different courses of action to take. This example converts the\nnumbers 0-2 into English representations:\n\n\n\nif(x==2)\n\n{\n\nSerial.print(“two”);\n\n}\n\nelse if(x==1)\n\n{\n\nSerial.print(“one”);\n\n}\n\nelse if(x==0)\n\n{\n\nSerial.print(“zero”);\n\n}\n\nelse\n\n{\n\nSerial.print(“x is not 0,1, or 2”);\n\n}\n\n\n\nEach if statement gets tested top to bottom and exactly one statement\nexecutes. If you do something like this, the second statement will never be\nhit:\n\n\n\nint x=4;\n\nint y;\n\nif(x==4)\n\n{\n\ny=9000;\n\n}\n\nelse if(x==4)\n\n{\n\ny=9001;  //This will never execute\n\n}\n\n\n\nFancier Expressions\n\nSo maybe you want to get fancy with your expressions. Suppose you want to test\nthat a number is over 9000 AND less than 10000. Let that number be our\nfavorite variable ‘x’. This is how you would do it:\n\n\n\nif(x>9000 && x<10000)\n\n{\n\n//x is between 9000 and 10000\n\n}\n\n\n\nThat ‘&&’ symbol means ‘AND’, but there are a few more you can use. Here are\nall of them:\n\nSymbol\n\n|\n\nWhat it means\n\n|\n\nExample true statement  \n  \n---|---|---  \n  \n&&\n\n|\n\nAND\n\n|\n\n3<4 && 10==10  \n  \n||\n\n|\n\nOR\n\n|\n\n10==10 || 10==9  \n  \n!\n\n|\n\nNOT\n\n|\n\n!(10==9)  \n  \n  \n  \n\nAnd now some Examples.\n\n\n\nThis tests if x is not equal to 10:\n\n\n\nif( !(x==10) )\n\n{\n\n//x is is not equal to 10\n\n}\n\n\n\nBut you could also just say x!=10, like so:\n\n\n\nif( x!=10 )\n\n{\n\n         //x is is not equal to 10\n\n}\n\n\n\nTest if x is less than -50 or greater than 50:\n\n\n\nif(x<-50 || x>50)\n\n{\n\n// x is less than -50 or greater than 50:\n\n}\n\n\n\nThe same thing, except this time saying ‘x is NOT between -50 and 50’:\n\n\n\nif( !(x>=-50 && x<=50) )\n\n{\n\n// x is NOT between -50 and 50\n\n}\n\n\n\nNote how we have ‘greater than or equal to’ instead of just ‘greater than’.\nRemember that ‘not less than -50’ is the same as ‘greater than or equal to\n-50’.\n\n\n\nYou can also combine AND and OR to do some interesting things:\n\nif( x>=-10 && x<=-5 || x>=0 && x <= 5)\n\n{\n\n// x is in the [-10,-5] range or the [0,5] range\n\n}\n\nThis checks if x is in the [-10,-5] range or the [0,5] range.\n\n\n\nRemember your order of operations? This programming language has that too. As\nit turns out, ‘&&’ comes before ‘||’ in the order of operations. So something\nlike this:\n\nx>10 && x<20 || x>100\n\nIs the same as saying this:\n\n(x>10 && x<20) || x>100\n\nAnd just like in your algebra class, whatever’s in the parentheses gets\nexecuted first.\n\n  \n  \n\n**_ACTIVITIES:_**\n\n\n\n    1. Start with your finished code from Exercise 51\n    2. Compile and upload this program and verify that the LED’s turn on and off in order from 2 - 15 with a 200ms delay.\n    3. Also verify that the serial output is the same as shown below:\n      1. Begin setup()\n      2. Make pins 2-15 outputs\n      3. Pins 2-15 are outputs\n      4. Finished setup()\n      5. Begin loop()\n      6. Begin turning LED's 2-15 on / off\n      7. Turn on ledNumber 2\n      8. Turn off ledNumber 2\n      9. Turn on ledNumber 3\n      10. Turn off ledNumber 3\n      11. Turn on ledNumber 4\n      12. Turn off ledNumber 4\n      13. Turn on ledNumber 5\n      14. Turn off ledNumber 5\n      15. Turn on ledNumber 6\n      16. Turn off ledNumber 6\n      17. Turn on ledNumber 7\n      18. Turn off ledNumber 7\n      19. Turn on ledNumber 8\n      20. Turn off ledNumber 8\n      21. Turn on ledNumber 9\n      22. Turn off ledNumber 9\n      23. Turn on ledNumber 10\n      24. Turn off ledNumber 10\n      25. Turn on ledNumber 11\n      26. Turn off ledNumber 11\n      27. Turn on ledNumber 12\n      28. Turn off ledNumber 12\n      29. Turn on ledNumber 13\n      30. Turn off ledNumber 13\n      31. Turn on ledNumber 14\n      32. Turn off ledNumber 14\n      33. Turn on ledNumber 15\n      34. Turn off ledNumber 15\n      35. Done turning LED's 2-15 on / off\n      36. delay 5 seconds\n      37. Finished loop()\n    4. You can verify the serial output by looking at the Output Console tab in Giffer OR you can upload the code to an Arduino and look at the Serial Output by clicking on the Serial Monitor magnifying Glass in the Arduino IDE.\n    5. Now it is time to practice using **If statements** by making your program output the same serial monitor output as shown below. Note: Previously when we used Giffer to grade exercises we only had Giffer check the LED states. But now we are going to have Giffer check the LED states AND check the Serial Monitor Output. Your code needs to have the same serial monitor output as shown below, in the correct frames, for Giffer to recognize your code as correct. When Giffer says correct, it has checked your code for accuracy in both the LED states and the Serial Monitor Output. **HINT: Add two simple if statements in loop() to add the additional serial output at the correct time.** New serial output is only **two lines shown in bold below.**\n      1. Begin setup()\n      2. Make pins 2-15 outputs\n      3. Pins 2-15 are outputs\n      4. Finished setup()\n      5. Begin loop()\n      6. Begin turning LED's 2-15 on / off\n      7. **Entering for loop with ledNumber == 2**\n      8. Turn on ledNumber 2\n      9. Turn off ledNumber 2\n      10. Turn on ledNumber 3\n      11. Turn off ledNumber 3\n      12. Turn on ledNumber 4\n      13. Turn off ledNumber 4\n      14. Turn on ledNumber 5\n      15. Turn off ledNumber 5\n      16. Turn on ledNumber 6\n      17. Turn off ledNumber 6\n      18. Turn on ledNumber 7\n      19. Turn off ledNumber 7\n      20. Turn on ledNumber 8\n      21. Turn off ledNumber 8\n      22. Turn on ledNumber 9\n      23. Turn off ledNumber 9\n      24. Turn on ledNumber 10\n      25. Turn off ledNumber 10\n      26. Turn on ledNumber 11\n      27. Turn off ledNumber 11\n      28. Turn on ledNumber 12\n      29. Turn off ledNumber 12\n      30. Turn on ledNumber 13\n      31. Turn off ledNumber 13\n      32. Turn on ledNumber 14\n      33. Turn off ledNumber 14\n      34. Turn on ledNumber 15\n      35. Turn off ledNumber 15\n      36. **Finishing for loop with ledNumber == 15**\n      37. Done turning LED's 2-15 on / off\n      38. delay 5 seconds\n      39. Finished loop()Save the completed sketch as YourInitials_Exercise52 in: Documents – Arduino – Exercises\n    6. Copy the code into the Giffer website\n    7. Enter your name and exercise number.\n    8. Select the Run and Grade button.\n    9. Look at the resulting Output image and make sure it is correct (Correct at lower part of image)\n    10. If it is Correct - use the Copy Page button to copy the evidence that you have correctly completed the exercise to clipboard.\n    11. Go to CL 10.4.22 Upload Completed Exercise52: And upload evidence that you have completed Exercise52\n    12. Click \"Prepare an answer\" on NEO\n    13. Click the \"<>\" (Source code) button.\n    14. Paste by pressing CTRL + V\n    15. Click \"Save and submit for grading\"\n    16. If you made changes to the code in Giffer, then Copy the code from Giffer and paste it into the Arduino and re-save it as: YourInitials_Exercise52 - in your Documents/Arduino/Exercises Folder."}