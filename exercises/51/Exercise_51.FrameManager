{"number":"51","startingCode":"void setup()\n{\n  Serial.begin(9600); // Setup the serial port speed\n  Serial.println(\"Begin setup()\"); // Send to Serial port for debug\n  for(int  ledNumber = 2; ledNumber <= 15; ledNumber ++)\n  {\n    pinMode(ledNumber, OUTPUT);\n  }\n}\n\nvoid loop()\n{\n  Serial.println(\"Begin loop()\"); // Send to Serial port for debug\n  int ledNumber;\n  int delayTime = 200;\n  for (ledNumber = 2; ledNumber <= 15; ledNumber++)\n  {\n    Serial.print(\"Turn on ledNumber \"); // Send to Serial port for debug\n    Serial.println(ledNumber); // print a variable & finish printing the line\n    digitalWrite(ledNumber, HIGH);\n    delay(delayTime);\n    digitalWrite(ledNumber, LOW);\n  }\n  delay(5000);\n  Serial.println(\"Finished loop()\"); // Send to Serial port for debug\n}","suffix":"int main() {\n  setup();\n  loop();\n  return 0;\n}\n","board":{"type":"LED Board","setup":{"pinKeyframes":[]}},"frameManager":{"frames":[{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":1023},"postDelay":200,"outputText":["Begin setup()\n","Make pins 2-15 outputs\n","Pins 2-15 are outputs\n","Finished setup()\n","Begin loop()\n","Begin turning LED's 2-15 on / off\n","Turn on ledNumber ","2\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":1023},"postDelay":200,"outputText":["Turn off ledNumber ","2\n","Turn on ledNumber ","3\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":1023},"postDelay":200,"outputText":["Turn off ledNumber ","3\n","Turn on ledNumber ","4\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":1023},"postDelay":200,"outputText":["Turn off ledNumber ","4\n","Turn on ledNumber ","5\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":1023},"postDelay":200,"outputText":["Turn off ledNumber ","5\n","Turn on ledNumber ","6\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":1023},"postDelay":200,"outputText":["Turn off ledNumber ","6\n","Turn on ledNumber ","7\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":1023},"postDelay":200,"outputText":["Turn off ledNumber ","7\n","Turn on ledNumber ","8\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":1023},"postDelay":200,"outputText":["Turn off ledNumber ","8\n","Turn on ledNumber ","9\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":1023},"postDelay":200,"outputText":["Turn off ledNumber ","9\n","Turn on ledNumber ","10\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":1023},"postDelay":200,"outputText":["Turn off ledNumber ","10\n","Turn on ledNumber ","11\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":1023},"postDelay":200,"outputText":["Turn off ledNumber ","11\n","Turn on ledNumber ","12\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":1023},"postDelay":200,"outputText":["Turn off ledNumber ","12\n","Turn on ledNumber ","13\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":1023},"postDelay":200,"outputText":["Turn off ledNumber ","13\n","Turn on ledNumber ","14\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":1023},"postDelay":200,"outputText":["Turn off ledNumber ","14\n","Turn on ledNumber ","15\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"postDelay":5000,"outputText":["Turn off ledNumber ","15\n","Done turning LED's 2-15 on / off\n","delay 5 seconds\n"]},{"ledModes":{"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1},"ledStates":{"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0},"postDelay":0,"outputText":["Finished loop()\n"]}],"currentFrame":15,"elapsedTime":7800,"isGraded":false},"directions":"Exercise 51: Learning how to use the serial monitor to look inside and see the value of a variable.\n \nNEW: Using Serial.print() in the Arduino programming environment to print variables;\n \nDESCRIPTION: \n \nSo we already know we can print strings like “Hello World!” into the print statement, what else can we put inside the “_________” in the parenthesis?  You can print out constant numbers, characters, or strings. This is illustrated below:\n \nSerial.print(78);  prints 78\nSerial.print(\"Hello world.\")   prints Hello world.\n \nWe can also fill in the “___” using a variable, which of course represents a number, character, or string.  This means the print statement will print to the screen the value a variable represents, not the name of the variable.  \n \nEXAMPLE: \nvoid setup()\n{\n    Serial.begin(9600);\n}\n \nvoid loop()\n{\n    Int x = 777;\n    Serial.print(“The value of variable x is ”);\n    Serial.print(x);\n}\n \nIf we look on the serial port monitor we will see the following output \n \nThe value of variable x is 777\n \nOkay, so now we know how to use the print statement, but how does using it actually help us?  It helps us for a concept called debugging. Debugging is essentially a technique to help identify errors in your program.  Often times, you will write a program and it will produce results you did not intend. Adding in print statements to track the values of your variables can often tell us where/how a program is producing an error.  For example:\n \nint x = 2;\nwhile(x<5)\nSerial.println(x);\ndigitalWrite(x,HIGH);\ndelay(100);\ndigitalWrite(x,LOW);\nx = x + 1;\n \nThis code above is supposed to turn on LEDS 2, 3, 4 and then stop, however there is an error and it seems to do nothing!  If we open the COM, we can see that the value of x begins with 2 (as expected) but then this value never changes -- it is 2 indefinitely!!  This might explain why nothing is happening, we can see that since x never changes, the while loop condition x<5 will never be met, and the loop runs forever.  But wait, we see the line x= x + 1, why does the value of x never change? This means this line must not ever be run, and hopefully you can see this is because we forgot our { } for the while loop. Without the { }, only the print statement is inside the while loop.  Adding these in fixes the problem:\n \nint x = 2;\nwhile(x<5)\n{\nSerial.println(x);\ndigitalWrite(x,HIGH);\ndelay(100);\ndigitalWrite(x,LOW);\nx = x + 1;\n}\n \nNow looking at the COM, the value of x is changing and our program is functioning properly.  \n \nObviously the print statement was extremely helpful in debugging our program, as it helped to narrow the scope of our issue. We started with “HELP my program is broken I don’t know why, it could be anything!!!” and ended with “ I know why my program does not work, and I can see where it is breaking.”  This saves lots of time when searching for errors, especially as the length of your program grows and the potential sources of error increase.\n \nACTIVITIES:\n \n\n• Copy the program from Starting Point Exercise51 into the Arduino IDE\n• Compile and upload this program and verify that all the even LED’s blink on and off with a 200ms delay between each, then the program pauses for 5 seconds and the whole thing starts over again.\n• Also verify that the serial output is the same as shown below:\n\n• Begin setup()\n• Begin loop()\n• Turn on ledNumber 2\n• Turn on ledNumber 3\n• Turn on ledNumber 4\n• Turn on ledNumber 5\n• Turn on ledNumber 6\n• Turn on ledNumber 7\n• Turn on ledNumber 8\n• Turn on ledNumber 9\n• Turn on ledNumber 10\n• Turn on ledNumber 11\n• Turn on ledNumber 12\n• Turn on ledNumber 13\n• Turn on ledNumber 14\n• Turn on ledNumber 15\n• Finished loop()\n\n• You can verify the serial output by looking at the Output Console tab in Giffer OR you can upload the code to an Arduino and look at the Serial Output by clicking on the Serial Monitor magnifying Glass in the Arduino IDE.\n• Now it is time to practice using Serial.print statements by making your program output the same serial monitor output as shown below. Note: Previously when we used Giffer to grade exercises we only had Giffer check the LED states. But now we are going to have Giffer check the LED states AND check the Serial Monitor Output. Your code needs to have the same serial monitor output as shown below, in the correct frames, for Giffer to recognize your code as correct. When Giffer says correct, it has checked your code for accuracy in both the LED states and the Serial Monitor Output.\n\n• Begin setup()\n• Make pins 2-15 outputs\n• Pins 2-15 are outputs\n• Finished setup()\n• Begin loop()\n• Begin turning LED's 2-15 on / off\n• Turn on ledNumber 2\n• Turn off ledNumber 2\n• Turn on ledNumber 3\n• Turn off ledNumber 3\n• Turn on ledNumber 4\n• Turn off ledNumber 4\n• Turn on ledNumber 5\n• Turn off ledNumber 5\n• Turn on ledNumber 6\n• Turn off ledNumber 6\n• Turn on ledNumber 7\n• Turn off ledNumber 7\n• Turn on ledNumber 8\n• Turn off ledNumber 8\n• Turn on ledNumber 9\n• Turn off ledNumber 9\n• Turn on ledNumber 10\n• Turn off ledNumber 10\n• Turn on ledNumber 11\n• Turn off ledNumber 11\n• Turn on ledNumber 12\n• Turn off ledNumber 12\n• Turn on ledNumber 13\n• Turn off ledNumber 13\n• Turn on ledNumber 14\n• Turn off ledNumber 14\n• Turn on ledNumber 15\n• Turn off ledNumber 15\n• Done turning LED's 2-15 on / off\n• delay 5 seconds)\n• Finished loop()\n\n• Save the completed sketch as YourInitials_Exercise51 in: Documents – Arduino – Exercises\n• Copy the code into the Giffer website\n• Enter your name and exercise number.\n• Select the Run and Grade button.\n• Look at the resulting Output image and make sure it is correct (Correct at lower part of image)\n• If it is Correct - use the Copy Page button to copy the evidence that you have correctly completed the exercise to clipboard.\n• Go to CL 10.4.21 Upload Completed Exercise51: And upload evidence that you have completed Exercise51\n• Click \"Prepare an answer\" on NEO\n• Click the \"<>\" (Source code) button.\n• Paste by pressing CTRL + V\n• Click \"Save and submit for grading\"\n• If you made changes to the code in Giffer, then Copy the code from Giffer and paste it into the Arduino and re-save it as: YourInitials_Exercise51 - in your Documents/Arduino/Exercises Folder."}