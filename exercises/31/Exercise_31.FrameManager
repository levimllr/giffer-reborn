{"number":"31","startingCode":"void setup()\n{ \n  pinMode(2, OUTPUT);\n  pinMode(3, OUTPUT);\n}\n\nvoid loop()\n{ \n  int x;\n\n  for(x = 1; x <= 5; x++)\n  { \n    blink();\n  }\n  delay(4000);\n}\n\nvoid blink()\n{ \n  digitalWrite(2, HIGH);\n  delay(100);\n  digitalWrite(2, LOW);\n  delay(100);\n}","suffix":"int main() {\n  setup();\n  loop();\n  return 0;\n}\n","board":{"type":"LED Board","setup":{"pinKeyframes":[]}},"frameManager":{"frames":[{"ledModes":{"2":1,"3":1},"ledStates":{"2":1023},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":0},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":1023},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":0},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":1023},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":0},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":1023},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":0},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":1023},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":0},"postDelay":100,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":0},"postDelay":4000,"outputText":[]},{"ledModes":{"2":1,"3":1},"ledStates":{"2":0},"postDelay":0,"outputText":[]}],"currentFrame":11,"elapsedTime":5000,"isGraded":false},"directions":"**Exercise 31:** Creating our own functions, to make repetitive tasks easier.\nUp till now, we have been using built in functions such as digitalWrite and\ndelay. Now we are going to learn to create our own functions to make\nrepetitive tasks easier.  \n**Make sure you have done the following before proceeding:**\n\n\n\n  * Have watched the first video on functions - Arduino Functions 1\n\n**NEW:** **function definitions;**\n\n**DESCRIPTION: Creating your own function is a easier way to repeat a set of\ncommands.**\n\n**EXAMPLE:**\n\n\n\nvoid blink()    // this is called a function declaration  \n{  \n   digitalWrite(2, HIGH);       // This is the body of the function  \n   delay(500);  \n   digitalWrite(2, LOW);  \n   delay(500);  \n}\n\n\n\n**Creating Functions**\n\nWhen you create a function: you have to do the following:\n\n(1) **declare** the function\n\n(2) specify what **arguments** if any, the function “accepts”\n\n(3) write the function’s code in the **body**.\n\nSo a function has three main components: **declaration** , **arguments** , and\n**body**\n\n**Declaration** : the declaration of a function tells the machine two specific\nthings: **return type** and **function name**. You must always have both a\nreturn type and a function name for every function declaration.\n\n\n\n**return type** – what is the type of information this function will return\nwhen it gets called?\n\nvoid – returns nothing\n\nint – returns an integer ( To Start - our functions will not return a values.)\n\n\n\n**function name** – what is the unique name this function has? This name will\nbe used every time the function needs to get called\n\n\n\n**Example function declaration:**\n\n   void  blinkOnce\n\n(return type)  (function name)\n\n\n\n**Arguments**\n\nYou can **pass** values to a function when you call it. An **argument** is\nsomething that describes what _types of values_ a function will **accept**.\nFor example:\n\nint blinkOnce(int ledNumber, int delay);\n\n\n\nAccepts two arguments. The first argument must be an integer, the second\nargument must also be an integer. The function must be called with two values:\n\n\n\nblinkOnce(4, 200);\n\n\n\nWhen a function gets called, it will set **variables** to the values that get\npassed to it when it is called. So from the example above, when you call\nblinkOnce(4,200) then  ledNumber gets set to 4, delay gets set to 200 and then\nthe body of the function runs once.\n\n\n\n**Body**\n\nThe **body** of the function is the actual code that gets to run when a\nfunction is called. A matching pair of opening and closing braces specifies\nthe start and end of a function’s body. For example:\n\nint doNothing()\n\n    {\n\n// body code goes here\n\n}\n\n\n\nThe body code works the same as all other code in your program: you can create\nvariables, assign values to variables, do arithmetic, run loops, have if/else\nstatements, and call other functions. The only thing you cannot do inside the\nbody of a function is declare other functions.\n\n\n\n**_ACTIVITIES:_**\n\n\n\n  1. Copy the program from Starting Point Exercise31 into the Arduino IDE\n  2. Compile and upload this program and verify that LED 2 blinks on and off five times with a 100ms delay between each, then the program pauses for 4 seconds and the whole thing starts over again….\n  3. Rename the function from  blink to blink2Once\n  4. Save the completed sketch as YourInitials_Exercise31 in: Documents – Arduino – Exercises\n  5. Copy the code into the Giffer website\n  6. Enter your name and exercise number.\n  7. Select the Run and Grade button.\n  8. Look at the resulting Output image and make sure it is correct (Correct at lower part of image)\n  9. If it is Correct - use the Copy Page button to copy the evidence that you have correctly completed the exercise to clipboard.\n  10. Go to CL 10.3.31 Upload Completed Exercise31: And upload evidence that you have completed Exercise31\n  11. Click \"Prepare an answer\" on NEO\n  12. Click the \"<>\" (Source code) button.\n  13. Paste by pressing CTRL + V\n  14. Click \"Save and submit for grading\"\n  15. If you made changes to the code in Giffer, then Copy the code from Giffer and paste it into the Arduino and re-save it as: YourInitials_Exercise31 - in your Documents/Arduino/Exercises Folder.\n"}