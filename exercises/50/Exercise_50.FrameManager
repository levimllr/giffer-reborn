{"number":"50","startingCode":"void setup()\n{\n  Serial.begin(9600); // Setup the serial port speed\n}\n\nvoid loop()\n{\n  Serial.print(\"Hello World!\");\n  Serial.println(\"\");\n  delay(5000);\n}","suffix":"int main() {\n  setup();\n  loop();\n  return 0;\n}\n","board":{"type":"LED Board","setup":{"pinKeyframes":[]}},"frameManager":{"frames":[{"ledModes":{},"ledStates":{},"postDelay":500,"outputText":["Hello World!","\n"]},{"ledModes":{},"ledStates":{},"postDelay":5000,"outputText":["Good Bye World!!","\n"]},{"ledModes":{},"ledStates":{},"postDelay":0,"outputText":[]}],"currentFrame":2,"elapsedTime":5500,"isGraded":false},"directions":"**Exercise 50:** Learning how to use the serial monitor to look inside and see\nwhat’s happening inside our program as it is running.\n\n\n\n**NEW:** **Serial.print()** in the Arduino programming environment;\n\n\n\n**DESCRIPTION:** Serial.print() uses pins 0 and 1 via the USB cable to send\nmessages back to the computer (whenever the Arduino is actually connected to a\ncomputer.)   (That, by the way, is another reason we can’t use pins 0 and 1\nfor LEDs.) So how do we do this?  First, let’s look at a working example, and\nthen break down the code:\n\n\n\n**EXAMPLE:**\n\nvoid setup()\n\n{\n\n   Serial.begin(9600);\n\n}\n\n\n\nvoid loop()\n\n{\n\n   Serial.print(“Hello World!”);\n\n}\n\n\n\nThe first new thing we see in this code is the line “Serial.begin(9600);”\nThis line goes a little beyond the scope of this course, however it is\nnecessary to include it in your programs, otherwise print statements will not\nwork.  It is essentially setting the rate of data transfer between the\ncomputer and Arduino to be 9600 bits/sec.\n\n\n\nThe second new thing we see is the actual “Serial.print()” statement, with\n“Hello World!” inside the parenthesis.  You can think of this as\n“Serial.print(_______)” with the ___ signifying an empty space to fill in with\nwhat you want to be printed to the screen.  Thus, since “Hello World!” is\nfilling in the blank, that is what will be printed to the screen. Now you\nmight be thinking, “Where exactly does this print to the screen?”  To see\nthat, we must open the serial monitor as shown below:\n\n\n\nClicking the little magnifying glass in the top right opens the “COM” window,\nwhich is where any print statements in your code will print to.  You must make\nsure that the dropdown box in the lower right of the COM window says 9600\nbaud, as this pairs with our Serial.begin(9600) to set the correct data\ntransfer rate.   Also, make sure you capitalize the ‘S’ in “Serial” -- it is\ncase sensitive! As we can see, since our print statement is inside the loop,\nour COM window displays “Hello World!” and then prints and displays again\ninfinitely.\n\n\n\nAnother thing to know is that Giffer knows how to deal with Serial.print\nstatements and how to check them for accuracy. You can see the serial output\nof your code in Giffer by clicking on the **Output Console** tab.\n\n\n\n**NEW:** Using **Serial.println()** in the Arduino programming environment to\n**print to a new line** ;\n\n\n\n**DESCRIPTION:**\n\nA close relative to the print statement is the print newline statement\nSerial.println()\n\n\n\nThe print newline statement is identical to the print statement in every way,\nexcept that it appends a newline at the end of what you print.  This is most\nobvious by looking at the example below:\n\n\n\n**EXAMPLE:**\n\n\n\nvoid setup()\n\n{\n\n   Serial.begin(9600);\n\n}\n\n\n\nvoid loop()\n\n{\n\n   Serial.print(“hi”);\n\n   Serial.print(“bye”);\n\n}\n\n\n\nIf we look on the serial port monitor we will see the following output\n\n\n\n_hibye_\n\n\n\nCompare this to the next example:\n\n\n\nvoid setup()\n\n{\n\n   Serial.begin(9600);\n\n}\n\n\n\nvoid loop()\n\n{\n\n   Serial.println(“hi”);\n\n   Serial.println(“bye”);\n\n}\n\n\n\nIf we look on the serial port monitor we will see the following output\n\n\n\n_hi_\n\n_bye_\n\n\n\nNotice that println appended a newline, and thus bye is printed on the line\nbelow hi, whereas the simple print statement adds the next print alongside the\noriginal print, as seen in the example.  This is sometimes useful to improve\nreadability when printing. Another useful trick is to use Serial.println(“”);\nwhich will simply print a blank line to the COM, adding more whitespace to\nimprove readability.  \n  \n\n**_ACTIVITIES:_**\n\n\n\n  1. Copy the program from Starting Point Exercise50 into the Arduino IDE\n  2. Compile and upload this program and verify that the output from the serial port is _Hello World!_ then a new line, then a pause of 5 seconds and the whole thing starts over again….\n  3. Change the program so it prints: _Hello World!_ then a new line, delay for 500ms, then prints   _Good Bye World!!_ then a new line, then the program pauses for 5 seconds and the whole thing starts over again….\n  4. Save the completed sketch as YourInitials_Exercise50 in: Documents – Arduino – Exercises\n  5. Copy the code into the Giffer website\n  6. Enter your name and exercise number.\n  7. Select the Run and Grade button.\n  8. Look at the resulting Output image and make sure it is correct (Correct at lower part of image)\n  9. If it is Correct - use the Copy Page button to copy the evidence that you have correctly completed the exercise to clipboard.\n  10. Go to CL 10.4.20 Upload Completed Exercise50: And upload evidence that you have completed Exercise50\n  11. Click \"Prepare an answer\" on NEO\n  12. Click the \"<>\" (Source code) button.\n  13. Paste by pressing CTRL + V\n  14. Click \"Save and submit for grading\"\n  15. If you made changes to the code in Giffer, then Copy the code from Giffer and paste it into the Arduino and re-save it as: YourInitials_Exercise50 - in your Documents/Arduino/Exercises Folder."}